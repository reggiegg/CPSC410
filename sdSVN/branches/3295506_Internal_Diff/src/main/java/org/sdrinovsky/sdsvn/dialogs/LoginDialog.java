/*
 * @(#) $Id$
 *
 * Copyright (c) 2010 Steven Drinovsky. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.sdrinovsky.sdsvn.dialogs;

import java.io.File;

import java.util.HashMap;
import java.util.Map;

import org.sdrinovsky.sdsvn.SVNApp;

import org.tmatesoft.svn.core.auth.BasicAuthenticationManager;
import org.tmatesoft.svn.core.auth.ISVNAuthenticationManager;
import org.tmatesoft.svn.core.auth.SVNAuthentication;
import org.tmatesoft.svn.core.auth.SVNPasswordAuthentication;
import org.tmatesoft.svn.core.auth.SVNSSLAuthentication;

/**
 *
 * @author  sdrinovsky
 */
public class LoginDialog extends javax.swing.JDialog {
  static class PasswordLoginAuth extends SVNPasswordAuthentication {
    UserPass userPass = new UserPass();

    /**
     * Constructor PasswordLoginAuth
     *
     *
     */
    public PasswordLoginAuth() {
      super(null, null, false);
    }

    /**
     * Method getUserName
     *
     *
     * @return
     *
     */
    @Override
    public String getUserName() {
      return userPass.getUserName();
    }

    /**
     * Method getPassword
     *
     *
     * @return
     *
     */
    @Override
    public String getPassword() {
      return userPass.getPassword();
    }
  }

  static class SSLLoginAuth extends SVNSSLAuthentication {
    UserPass userPass = new UserPass();

    /**
     * Constructor SSLLoginAuth
     *
     *
     */
    public SSLLoginAuth() {
      super(null, null, false);
    }

    /**
     * Method getCertificateFile
     *
     *
     * @return
     *
     */
    @Override
    public File getCertificateFile() {
      return super.getCertificateFile();
    }

    /**
     * Method getUserName
     *
     *
     * @return
     *
     */
    @Override
    public String getUserName() {
      return userPass.getUserName();
    }

    /**
     * Method getPassword
     *
     *
     * @return
     *
     */
    @Override
    public String getPassword() {
      return userPass.getPassword();
    }
  }

  public static final ISVNAuthenticationManager authManager = new BasicAuthenticationManager(new SVNAuthentication[]{
    new PasswordLoginAuth(),
    new SSLLoginAuth()});
  private String password;

  /**
   * Constructor LoginDialog
   *
   *
   */
  public LoginDialog() {
    this(SVNApp.getApplication().getMainFrame());
  }

  /**
   * Creates new form LoginDialog
   *
   * @param parent
   */
  public LoginDialog(java.awt.Frame parent) {
    super(parent, true);

    initComponents();
  }

  /**
   * Method setVisible
   *
   *
   * @param b
   *
   */
  @Override
  public void setVisible(boolean b) {
    if(b) {
      tfUserName.setText(SVNApp.getApplication().getPreferences().get("username", ""));

      String savedPassword = SVNApp.getApplication().getPreferences().get("password", null);

      cbStorePassword.setSelected(savedPassword != null);

      if(savedPassword != null) {
        pfPassword.setText(savedPassword);
      } else {
        pfPassword.setText("");
      }

      if((tfUserName.getText() != null) && (tfUserName.getText().length() > 0)) {
        if((pfPassword.getPassword() != null) && (pfPassword.getPassword().length > 0)) {
          btnOk.requestFocus();
        } else {
          pfPassword.requestFocus();
        }
      }
    }

    super.setVisible(b);
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    lblUsername     = new javax.swing.JLabel();
    tfUserName      = new javax.swing.JTextField();
    lblPassword     = new javax.swing.JLabel();
    pfPassword      = new javax.swing.JPasswordField();
    btnCancel       = new javax.swing.JButton();
    btnOk           = new javax.swing.JButton();
    cbStorePassword = new javax.swing.JCheckBox();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(
       org.sdrinovsky.sdsvn.SVNApp.class).getContext().getResourceMap(LoginDialog.class);

    setTitle(resourceMap.getString("Form.title"));                     // NOI18N
    setAlwaysOnTop(true);
    setModal(true);
    setName("Form");                                                   // NOI18N
    setResizable(false);
    lblUsername.setDisplayedMnemonic('U');
    lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    lblUsername.setLabelFor(lblUsername);
    lblUsername.setText(resourceMap.getString("lblUsername.text"));    // NOI18N
    lblUsername.setName("lblUsername");                                // NOI18N
    tfUserName.setText(resourceMap.getString("tfUserName.text"));      // NOI18N
    tfUserName.setName("tfUserName");                                  // NOI18N
    tfUserName.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        accept(evt);
      }
    });
    lblPassword.setDisplayedMnemonic('P');
    lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    lblPassword.setLabelFor(pfPassword);
    lblPassword.setText(resourceMap.getString("lblPassword.text"));    // NOI18N
    lblPassword.setName("lblPassword");                                // NOI18N
    pfPassword.setText(resourceMap.getString("pfPassword.text"));      // NOI18N
    pfPassword.setName("pfPassword");                                  // NOI18N
    pfPassword.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        accept(evt);
      }
    });
    btnCancel.setMnemonic('C');
    btnCancel.setText(resourceMap.getString("btnCancel.text"));    // NOI18N
    btnCancel.setName("btnCancel");                                // NOI18N
    btnCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCancelActionPerformed(evt);
      }
    });
    btnOk.setMnemonic('O');
    btnOk.setText(resourceMap.getString("btnOk.text"));    // NOI18N
    btnOk.setName("btnOk");                                // NOI18N
    btnOk.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        accept(evt);
      }
    });
    cbStorePassword.setText(resourceMap.getString("cbStorePassword.text"));    // NOI18N
    cbStorePassword.setName("cbStorePassword");                                // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());

    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
       layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
         layout.createSequentialGroup().addContainerGap().addGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
             javax.swing.GroupLayout.Alignment.TRAILING,
             layout.createSequentialGroup().addComponent(cbStorePassword).addPreferredGap(
               javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE).addComponent(
               btnOk).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
               btnCancel)).addGroup(
                 javax.swing.GroupLayout.Alignment.TRAILING,
                 layout.createSequentialGroup().addGroup(
                   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(
                     lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                     Short.MAX_VALUE).addComponent(
                       lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                       Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(
                           pfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE).addComponent(
                           tfUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 190,
                           Short.MAX_VALUE)))).addContainerGap()));
    layout.setVerticalGroup(
       layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
         layout.createSequentialGroup().addContainerGap().addGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
             lblUsername).addComponent(
             tfUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
             javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
               javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
               layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
                 lblPassword).addComponent(
                 pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                 javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                   javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE,
                   Short.MAX_VALUE).addGroup(
                     layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
                       btnCancel).addComponent(btnOk).addComponent(cbStorePassword)).addContainerGap()));
    pack();
  }                                                                          // </editor-fold>//GEN-END:initComponents

  private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {    //GEN-FIRST:event_btnCancelActionPerformed
    pfPassword.setText(null);
    dispose();
  }                                                        //GEN-LAST:event_btnCancelActionPerformed

  private void accept(java.awt.event.ActionEvent evt) {    //GEN-FIRST:event_accept
    String username = tfUserName.getText();

    password = new String(pfPassword.getPassword());

    if((username == null) || (username.length() == 0)) {
      SVNApp.getApplication().getPreferences().remove("username");
    } else {
      SVNApp.getApplication().getPreferences().put("username", username);
    }

    if(cbStorePassword.isSelected()) {
      SVNApp.getApplication().getPreferences().put("password", password);
    } else {
      SVNApp.getApplication().getPreferences().remove("password");
    }

    tfUserName.setText(null);
    pfPassword.setText(null);
    dispose();
  }    //GEN-LAST:event_accept

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton        btnCancel;
  private javax.swing.JButton        btnOk;
  private javax.swing.JCheckBox      cbStorePassword;
  private javax.swing.JLabel         lblPassword;
  private javax.swing.JLabel         lblUsername;
  private javax.swing.JPasswordField pfPassword;
  private javax.swing.JTextField     tfUserName;
  // End of variables declaration//GEN-END:variables

  private String getPassword() {
    return password;
  }

  static Map<String, String> passwordMap = new HashMap();

  static class UserPass {
    String getUserName() {
      String currentRepo = SVNApp.getApplication().getPreferences().get("repo", "");
      String username    = SVNApp.getApplication().getPreferences().get("username", "");

      if(username.length() == 0) {
        LoginDialog dialog = new LoginDialog();

        SVNApp.getApplication().show(dialog);

        username = SVNApp.getApplication().getPreferences().get("username", "");

        passwordMap.put(currentRepo, dialog.getPassword());
      }

      return username;
    }

    String getPassword() {
      String currentRepo = SVNApp.getApplication().getPreferences().get("repo", "");
      String password    = passwordMap.get(currentRepo);

      if(password == null) {
        password = SVNApp.getApplication().getPreferences().get("password", null);

        if(password == null) {
          LoginDialog dialog = new LoginDialog();

          SVNApp.getApplication().show(dialog);

          password = dialog.getPassword();

          passwordMap.put(currentRepo, password);
        }
      }

      return password;
    }
  }
}
